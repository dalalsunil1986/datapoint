<?php
require_once('datapoint.inc');
require_once('datapoint.vertex-install.inc');

function datapoint_init() {
  $modules = module_implements('datapoint_update');
  foreach ($modules as $module) {
    $results = new DatapointResults();
  }
}

function datapoint_menu() {
  $menu = array();
  $menu['admin/content/datapoint'] = array(
    'title' => 'Data points',
    'page callback' => '_datapoint_admin_index_page',
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/add-source'] = array(
    'title' => 'Add new data point source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_source_add'),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/source-types'] = array(
    'title' => 'Source types',
    'page callback' => '_datapoint_admin_source_types',
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/source-types/add'] = array(
    'title' => 'Add source type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_admin_add_source_type'),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/source-types/add/%/%'] = array(
    'title' => 'Source type settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_admin_add_source_type_configure', 5, 6),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  // Ping
  $menu['datapoint/ping/%'] = array(
    'page callback' => 'datapoint_update_source',
    'page arguments' => array(2),
    'access arguments' => array('datapoint use ping'),
    'file' => 'datapoint.admin.inc',
  );
  
  // Ahah callbacks
  $menu['datapoint/ahah/field-source-configuration/%/%'] = array(
    'page callback' => 'datapoint_ahah_field_source_configuration',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $menu['datapoint/ahah/source_configuration'] = array(
    'page callback' => 'datapoint_ahah_source_configuration',
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $menu['datapoint/ahah/custom-node-configuration'] = array(
    'page callback' => 'datapoint_ahah_custom_node_configuration',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $menu;
}

function datapoint_perm() {
  return array('administer datapoint sources');
}

function datapoint_source_fields($parser) {
  static $cache = array();

  if (!isset($cache[$parser])) {
    $schema = datapoint_vertex_module_schema($parser);
    $schema_fields = $schema[$parser . '_vertex']['fields'];

    $source_fields = array(
      'datapoint_name' => array(
        'callback' => '_datapoint_source_fields',
        'description' => t('The name of the data point'),
      ),
      'datapoint_external_id' => array(
        'callback' => '_datapoint_source_fields',
        'description' => t('The external id for the data point'),
      ),
    );
    
    foreach ($schema_fields as $key => $column) {
      $source_fields['vertex_schema_' . $key] = array(
        'description' => $column['description'],
        'callback' => '_datapoint_source_fields',
        'vertex_attribute' => $key,
      );
    }
    
    drupal_alter('datapoint_source_fields', $source_fields, $parser);
    $cache[$parser] = $source_fields;
  }

  return $cache[$parser];
}

function _datapoint_source_fields($field_name, $field, $datapoint, $vertex) {
  switch ($field_name) {
    case 'datapoint_name':
      return $datapoint->name;
    break;
    case 'datapoint_external_id':
      return $datapoint->external_id;
    break;
    default:
      // Check if this simply is a reference to a vertex attribute
      // TODO: Maybe this could be a viable method to get the datapoint attributes too
      if (isset($field['vertex_attribute'])) {
        $a = $field['vertex_attribute'];
        if (isset($vertex->$a)) {
          return $vertex->$a;
        }
      }
    break;
  }
}

/**
 * Loads the data point source type
 *
 * @return array Source type configuration
 **/
function datapoint_source_type($type) {
  $res = db_query("SELECT configuration FROM {datapoint_source_type} WHERE type='%s'", $type);
  if ($source = db_fetch_object($res)) {
    return unserialize($source->configuration);
  }
  return FALSE;
}

/**
 * Loads a data point source
 *
 * @return array Source configuration
 **/
function datapoint_source($sid) {
  $res = db_query("SELECT configuration FROM {datapoint_source} WHERE sid='%d'", $sid);
  if ($source = db_fetch_object($res)) {
    return unserialize($source->configuration);
  }
  return FALSE;
}

/**
 * Saves a source type configuration in the database
 *
 * @return void
 **/
function datapoint_add_source_type($configuration) {
  db_query("INSERT INTO {datapoint_source_type}(type, name, configuration) VALUES('%s','%s','%s')", 
    $configuration['type'], $configuration['name'], serialize($configuration));
}

/**
 * Saves a source in the database
 *
 * @return void
 **/
function datapoint_add_source($configuration) {
  db_query("INSERT INTO {datapoint_source}(source_type, name, last_update, configuration)
    VALUES('%s','%s','%s',0,'%s')", 
    $configuration['type'], $configuration['name'], serialize($configuration));
}

/**
 * Gets the defined source types as a associative array type=>name
 *
 * @return void
 **/
function datapoint_source_types() {
  $types = array();
  $res = db_query("SELECT type, name FROM {datapoint_source_type}");
  while ($o = db_fetch_object($res)) {
    $types[$o->type] = $o->name;
  }
  return $types;
}

/**
 * Gets the fields that datapoint feeds can access in nodes of specific type
 *
 * @return void
 **/
function datapoint_managed_fields($content_type) {
  static $cache = array();

  if (!isset($cache[$content_type])) {
    $type = node_get_types('type', $content_type);
    $fields = array();
    drupal_alter('datapoint_managed_fields', $fields, $type);
    
    return $cache[$content_type] = $fields;
  }

  return $cache[$content_type];
}

/**
 * Implementation of hook_datapoint_managed_fields_alter
 *
 * @return void
 **/
function datapoint_datapoint_managed_fields_alter(&$fields, $type) {
  if ($type->has_title) {
    $fields['title'] = array(
      'label' => $type->title_label,
      'required' => TRUE,
      'setter' => '_datapoint_set_node_title',
    );
  }
  if ($type->has_body) {
    $fields['body'] = array(
      'label' => $type->body_label,
      'required' => $type->min_word_count>0,
      'setter' => '_datapoint_set_node_body',
    );
  }
}

function _datapoint_set_node_title(&$node, $field, $value) {
  $node->title = $value;
}

function _datapoint_set_node_body(&$node, $field, $value) {
  $node->body = $value;
}

function datapoint_url_fetch($url, &$result, $callback) {
  // This function initializes CURL, sets the necessary CURL
  // options, executes the request and returns the results.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $data = curl_exec($ch);
  curl_close($ch);
  
  call_user_func($callback, $data, $result);
}