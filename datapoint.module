<?php
require_once('datapoint.inc');
require_once('datapoint.vertex-install.inc');

function datapoint_init() {
  $modules = module_implements('datapoint_update');
  foreach ($modules as $module) {
    $results = new DatapointResults();
  }
}

function datapoint_menu() {
  $menu = array();
  $menu['admin/content/datapoint'] = array(
    'title' => 'Data points',
    'page callback' => '_data_point_admin_index_page',
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/add-source'] = array(
    'title' => 'Add new data point source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_datapoint_source_add'),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/source-types'] = array(
    'title' => 'Data point source types',
    'page callback' => '_data_point_admin_source_types',
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/add-source-type'] = array(
    'title' => 'Add source type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_data_point_admin_add_source_type'),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['admin/content/datapoint/add-source-type/%/%'] = array(
    'title' => 'Source type settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_data_point_admin_add_source_type_configure', 4, 5),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $menu['datapoint/ahah/field_source_configuration/%/%'] = array(
    'page callback' => 'datapoint_ahah_field_source_configuration',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer datapoint sources'),
    'file' => 'datapoint.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $menu;
}

function datapoint_perm() {
  return array('administer datapoint sources');
}

function datapoint_source_fields($parser) {
  static $cache = array();

  if (!isset($cache[$parser])) {
    $schema = datapoint_vertex_module_schema($parser);
    $schema_fields = $schema[$parser . '_vertex']['fields'];

    $source_fields = array(
      'datapoint_name' => array(
        'callback' => '_datapoint_source_fields',
        'description' => t('The name of the data point'),
      ),
      'datapoint_external_id' => array(
        'callback' => '_datapoint_source_fields',
        'description' => t('The external id for the data point'),
      ),
    );
    
    foreach ($schema_fields as $key => $column) {
      $source_fields['vertex_schema_' . $key] = array(
        'description' => $column['description'],
        'callback' => '_datapoint_source_fields',
        'vertex_attribute' => $key,
      );
    }
    
    drupal_alter('datapoint_source_fields', $source_fields, $parser);
    $cache[$parser] = $source_fields;
  }

  return $cache[$parser];
}

function _datapoint_source_fields($field_name, $field, $datapoint, $vertex) {
  switch ($field_name) {
    case 'datapoint_name':
      return $datapoint->name;
    break;
    case 'datapoint_external_id':
      return $datapoint->external_id;
    break;
    default:
      // Check if this simply is a reference to a vertex attribute
      // TODO: Maybe this could be a viable method to get the datapoint attributes too
      if (isset($field['vertex_attribute'])) {
        $a = $field['vertex_attribute'];
        if (isset($vertex->$a)) {
          return $vertex->$a;
        }
      }
    break;
  }
}

function datapoint_managed_fields($content_type) {
  static $cache = array();

  if (!isset($cache[$content_type])) {
    $type = node_get_types('type', $content_type);
    $fields = array();
    drupal_alter('datapoint_managed_fields', $fields, $type);
    return $cache[$content_type] = $fields;
  }

  return $cache[$content_type];
}

function datapoint_update_feed($fid) {
  // $url is the resource path of the Y! Weather RSS
  // with the appended querystring of zip code/location id.
  $url = 'http://xml.weather.yahoo.com/forecastrss?p=SWXX0020&u=c';

  // This function initializes CURL, sets the necessary CURL
  // options, executes the request and returns the results.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $result = curl_exec($ch);
  curl_close($ch);
}